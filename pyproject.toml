[project]
name = "dagster-clickhouse"
version = "0.1.0"
description = "High-performance ClickHouse storage backend for Dagster event logs"
authors = [
    {name = "Bernard Greyling", email = "bpgreyling@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["dagster", "clickhouse", "event-log", "storage", "analytics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "dagster>=1.5.0",
    "clickhouse-connect>=0.6.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/dagster-clickhouse"
Repository = "https://github.com/yourusername/dagster-clickhouse"
Issues = "https://github.com/yourusername/dagster-clickhouse/issues"
Documentation = "https://github.com/yourusername/dagster-clickhouse#readme"
Changelog = "https://github.com/yourusername/dagster-clickhouse/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "hatch>=1.7.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
]

[tool.hatch.version]
path = "dagster_clickhouse/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["dagster_clickhouse"]

[tool.hatch.build.targets.sdist]
include = [
    "/dagster_clickhouse",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

# uv-specific configuration for lockfile generation
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "hatch>=1.7.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "twine>=4.0.0",
    "dagster-clickhouse",
]

[tool.uv.workspace]
members = [
    ".",
]

[tool.uv.sources]
dagster-clickhouse = { workspace = true }

# Ruff configuration (replaces flake8, isort, etc.)
[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise ... from err - we'll handle this separately
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# Black configuration
[tool.black]
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["dagster_clickhouse"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv", "build", "dist"]
skips = ["B101"]  # Skip assert_used test since we use check.* functions

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
